// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	main.proto

It has these top-level messages:
	TerminalStateRequest
	TerminalStateResponse
	TerminalBuyRequest
	TerminalBuyResponse
	TerminalAddDepositOrderRequest
	TerminalAddDepositOrderResponse
	TerminalScanRequest
	TerminalScanResponse
	AbortRequest
	AbortResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TerminalStateRequest struct {
	TerminalID string `protobuf:"bytes,1,opt,name=TerminalID" json:"TerminalID,omitempty"`
}

func (m *TerminalStateRequest) Reset()                    { *m = TerminalStateRequest{} }
func (m *TerminalStateRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminalStateRequest) ProtoMessage()               {}
func (*TerminalStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TerminalStateRequest) GetTerminalID() string {
	if m != nil {
		return m.TerminalID
	}
	return ""
}

type TerminalStateResponse struct {
	UUID               string                           `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Accounts           []*TerminalStateResponse_Account `protobuf:"bytes,2,rep,name=Accounts" json:"Accounts,omitempty"`
	PendingOrders      []*TerminalStateResponse_Order   `protobuf:"bytes,3,rep,name=PendingOrders" json:"PendingOrders,omitempty"`
	PendingOrdersTotal int32                            `protobuf:"zigzag32,4,opt,name=PendingOrdersTotal" json:"PendingOrdersTotal,omitempty"`
	CashInScanReceived bool                             `protobuf:"varint,5,opt,name=CashInScanReceived" json:"CashInScanReceived,omitempty"`
}

func (m *TerminalStateResponse) Reset()                    { *m = TerminalStateResponse{} }
func (m *TerminalStateResponse) String() string            { return proto.CompactTextString(m) }
func (*TerminalStateResponse) ProtoMessage()               {}
func (*TerminalStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TerminalStateResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TerminalStateResponse) GetAccounts() []*TerminalStateResponse_Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *TerminalStateResponse) GetPendingOrders() []*TerminalStateResponse_Order {
	if m != nil {
		return m.PendingOrders
	}
	return nil
}

func (m *TerminalStateResponse) GetPendingOrdersTotal() int32 {
	if m != nil {
		return m.PendingOrdersTotal
	}
	return 0
}

func (m *TerminalStateResponse) GetCashInScanReceived() bool {
	if m != nil {
		return m.CashInScanReceived
	}
	return false
}

type TerminalStateResponse_Account struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=DisplayName" json:"DisplayName,omitempty"`
	Balance     int32  `protobuf:"zigzag32,3,opt,name=Balance" json:"Balance,omitempty"`
	SortKey     string `protobuf:"bytes,4,opt,name=SortKey" json:"SortKey,omitempty"`
}

func (m *TerminalStateResponse_Account) Reset()         { *m = TerminalStateResponse_Account{} }
func (m *TerminalStateResponse_Account) String() string { return proto.CompactTextString(m) }
func (*TerminalStateResponse_Account) ProtoMessage()    {}
func (*TerminalStateResponse_Account) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *TerminalStateResponse_Account) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TerminalStateResponse_Account) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TerminalStateResponse_Account) GetBalance() int32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *TerminalStateResponse_Account) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

type TerminalStateResponse_Order struct {
	DisplayName string `protobuf:"bytes,1,opt,name=DisplayName" json:"DisplayName,omitempty"`
	Price       int32  `protobuf:"zigzag32,2,opt,name=Price" json:"Price,omitempty"`
	NeedsReview bool   `protobuf:"varint,3,opt,name=NeedsReview" json:"NeedsReview,omitempty"`
}

func (m *TerminalStateResponse_Order) Reset()                    { *m = TerminalStateResponse_Order{} }
func (m *TerminalStateResponse_Order) String() string            { return proto.CompactTextString(m) }
func (*TerminalStateResponse_Order) ProtoMessage()               {}
func (*TerminalStateResponse_Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *TerminalStateResponse_Order) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TerminalStateResponse_Order) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TerminalStateResponse_Order) GetNeedsReview() bool {
	if m != nil {
		return m.NeedsReview
	}
	return false
}

type TerminalBuyRequest struct {
	TerminalID string `protobuf:"bytes,1,opt,name=TerminalID" json:"TerminalID,omitempty"`
	AccountID  string `protobuf:"bytes,2,opt,name=AccountID" json:"AccountID,omitempty"`
	UUID       string `protobuf:"bytes,3,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *TerminalBuyRequest) Reset()                    { *m = TerminalBuyRequest{} }
func (m *TerminalBuyRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminalBuyRequest) ProtoMessage()               {}
func (*TerminalBuyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TerminalBuyRequest) GetTerminalID() string {
	if m != nil {
		return m.TerminalID
	}
	return ""
}

func (m *TerminalBuyRequest) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *TerminalBuyRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type TerminalBuyResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *TerminalBuyResponse) Reset()                    { *m = TerminalBuyResponse{} }
func (m *TerminalBuyResponse) String() string            { return proto.CompactTextString(m) }
func (*TerminalBuyResponse) ProtoMessage()               {}
func (*TerminalBuyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TerminalBuyResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type TerminalAddDepositOrderRequest struct {
	TerminalID   string `protobuf:"bytes,1,opt,name=TerminalID" json:"TerminalID,omitempty"`
	CashInAmount int32  `protobuf:"zigzag32,2,opt,name=CashInAmount" json:"CashInAmount,omitempty"`
}

func (m *TerminalAddDepositOrderRequest) Reset()                    { *m = TerminalAddDepositOrderRequest{} }
func (m *TerminalAddDepositOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminalAddDepositOrderRequest) ProtoMessage()               {}
func (*TerminalAddDepositOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TerminalAddDepositOrderRequest) GetTerminalID() string {
	if m != nil {
		return m.TerminalID
	}
	return ""
}

func (m *TerminalAddDepositOrderRequest) GetCashInAmount() int32 {
	if m != nil {
		return m.CashInAmount
	}
	return 0
}

type TerminalAddDepositOrderResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *TerminalAddDepositOrderResponse) Reset()                    { *m = TerminalAddDepositOrderResponse{} }
func (m *TerminalAddDepositOrderResponse) String() string            { return proto.CompactTextString(m) }
func (*TerminalAddDepositOrderResponse) ProtoMessage()               {}
func (*TerminalAddDepositOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TerminalAddDepositOrderResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type TerminalScanRequest struct {
	TerminalID string `protobuf:"bytes,1,opt,name=TerminalID" json:"TerminalID,omitempty"`
	ProductID  string `protobuf:"bytes,2,opt,name=ProductID" json:"ProductID,omitempty"`
}

func (m *TerminalScanRequest) Reset()                    { *m = TerminalScanRequest{} }
func (m *TerminalScanRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminalScanRequest) ProtoMessage()               {}
func (*TerminalScanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TerminalScanRequest) GetTerminalID() string {
	if m != nil {
		return m.TerminalID
	}
	return ""
}

func (m *TerminalScanRequest) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

type TerminalScanResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *TerminalScanResponse) Reset()                    { *m = TerminalScanResponse{} }
func (m *TerminalScanResponse) String() string            { return proto.CompactTextString(m) }
func (*TerminalScanResponse) ProtoMessage()               {}
func (*TerminalScanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TerminalScanResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AbortRequest struct {
	TerminalID string `protobuf:"bytes,1,opt,name=TerminalID" json:"TerminalID,omitempty"`
}

func (m *AbortRequest) Reset()                    { *m = AbortRequest{} }
func (m *AbortRequest) String() string            { return proto.CompactTextString(m) }
func (*AbortRequest) ProtoMessage()               {}
func (*AbortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AbortRequest) GetTerminalID() string {
	if m != nil {
		return m.TerminalID
	}
	return ""
}

type AbortResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *AbortResponse) Reset()                    { *m = AbortResponse{} }
func (m *AbortResponse) String() string            { return proto.CompactTextString(m) }
func (*AbortResponse) ProtoMessage()               {}
func (*AbortResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AbortResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*TerminalStateRequest)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalStateRequest")
	proto.RegisterType((*TerminalStateResponse)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalStateResponse")
	proto.RegisterType((*TerminalStateResponse_Account)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalStateResponse.Account")
	proto.RegisterType((*TerminalStateResponse_Order)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalStateResponse.Order")
	proto.RegisterType((*TerminalBuyRequest)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalBuyRequest")
	proto.RegisterType((*TerminalBuyResponse)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalBuyResponse")
	proto.RegisterType((*TerminalAddDepositOrderRequest)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalAddDepositOrderRequest")
	proto.RegisterType((*TerminalAddDepositOrderResponse)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalAddDepositOrderResponse")
	proto.RegisterType((*TerminalScanRequest)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalScanRequest")
	proto.RegisterType((*TerminalScanResponse)(nil), "i6getraenkeabrechnungssystem3000.rpc.TerminalScanResponse")
	proto.RegisterType((*AbortRequest)(nil), "i6getraenkeabrechnungssystem3000.rpc.AbortRequest")
	proto.RegisterType((*AbortResponse)(nil), "i6getraenkeabrechnungssystem3000.rpc.AbortResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TerminalBackend service

type TerminalBackendClient interface {
	GetState(ctx context.Context, in *TerminalStateRequest, opts ...grpc.CallOption) (*TerminalStateResponse, error)
	Buy(ctx context.Context, in *TerminalBuyRequest, opts ...grpc.CallOption) (*TerminalBuyResponse, error)
	AddDepositOrder(ctx context.Context, in *TerminalAddDepositOrderRequest, opts ...grpc.CallOption) (*TerminalAddDepositOrderResponse, error)
	Scan(ctx context.Context, in *TerminalScanRequest, opts ...grpc.CallOption) (*TerminalScanResponse, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error)
}

type terminalBackendClient struct {
	cc *grpc.ClientConn
}

func NewTerminalBackendClient(cc *grpc.ClientConn) TerminalBackendClient {
	return &terminalBackendClient{cc}
}

func (c *terminalBackendClient) GetState(ctx context.Context, in *TerminalStateRequest, opts ...grpc.CallOption) (*TerminalStateResponse, error) {
	out := new(TerminalStateResponse)
	err := grpc.Invoke(ctx, "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalBackendClient) Buy(ctx context.Context, in *TerminalBuyRequest, opts ...grpc.CallOption) (*TerminalBuyResponse, error) {
	out := new(TerminalBuyResponse)
	err := grpc.Invoke(ctx, "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/Buy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalBackendClient) AddDepositOrder(ctx context.Context, in *TerminalAddDepositOrderRequest, opts ...grpc.CallOption) (*TerminalAddDepositOrderResponse, error) {
	out := new(TerminalAddDepositOrderResponse)
	err := grpc.Invoke(ctx, "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/AddDepositOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalBackendClient) Scan(ctx context.Context, in *TerminalScanRequest, opts ...grpc.CallOption) (*TerminalScanResponse, error) {
	out := new(TerminalScanResponse)
	err := grpc.Invoke(ctx, "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/Scan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalBackendClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error) {
	out := new(AbortResponse)
	err := grpc.Invoke(ctx, "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/Abort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TerminalBackend service

type TerminalBackendServer interface {
	GetState(context.Context, *TerminalStateRequest) (*TerminalStateResponse, error)
	Buy(context.Context, *TerminalBuyRequest) (*TerminalBuyResponse, error)
	AddDepositOrder(context.Context, *TerminalAddDepositOrderRequest) (*TerminalAddDepositOrderResponse, error)
	Scan(context.Context, *TerminalScanRequest) (*TerminalScanResponse, error)
	Abort(context.Context, *AbortRequest) (*AbortResponse, error)
}

func RegisterTerminalBackendServer(s *grpc.Server, srv TerminalBackendServer) {
	s.RegisterService(&_TerminalBackend_serviceDesc, srv)
}

func _TerminalBackend_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalBackendServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalBackendServer).GetState(ctx, req.(*TerminalStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalBackend_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalBackendServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalBackendServer).Buy(ctx, req.(*TerminalBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalBackend_AddDepositOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalAddDepositOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalBackendServer).AddDepositOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/AddDepositOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalBackendServer).AddDepositOrder(ctx, req.(*TerminalAddDepositOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalBackend_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalBackendServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalBackendServer).Scan(ctx, req.(*TerminalScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalBackend_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalBackendServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/i6getraenkeabrechnungssystem3000.rpc.TerminalBackend/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalBackendServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminalBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "i6getraenkeabrechnungssystem3000.rpc.TerminalBackend",
	HandlerType: (*TerminalBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _TerminalBackend_GetState_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _TerminalBackend_Buy_Handler,
		},
		{
			MethodName: "AddDepositOrder",
			Handler:    _TerminalBackend_AddDepositOrder_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _TerminalBackend_Scan_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _TerminalBackend_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

func init() { proto.RegisterFile("main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x75, 0xb3, 0x59, 0x9b, 0xde, 0xb6, 0x96, 0x8e, 0x15, 0x96, 0x45, 0x6a, 0x58, 0x14, 0x02,
	0xca, 0x52, 0x5a, 0xa8, 0x5a, 0x9f, 0x92, 0x6e, 0x91, 0x20, 0xd4, 0xb2, 0x69, 0x5f, 0x7c, 0x91,
	0xe9, 0xee, 0x35, 0x5d, 0x9a, 0xcc, 0xae, 0x33, 0xb3, 0x95, 0x80, 0xe0, 0x93, 0xff, 0xc3, 0x57,
	0x9f, 0xfc, 0x8b, 0x92, 0xd9, 0x8f, 0x6c, 0x62, 0x0c, 0x9b, 0xe4, 0x2d, 0x73, 0x66, 0xee, 0x39,
	0x67, 0xee, 0x9c, 0x9b, 0x05, 0x18, 0xd2, 0x90, 0x39, 0x31, 0x8f, 0x64, 0x44, 0x9e, 0x87, 0x27,
	0x7d, 0x94, 0x9c, 0x22, 0xbb, 0x43, 0x7a, 0xc3, 0xd1, 0xbf, 0x65, 0x09, 0xeb, 0x0b, 0x31, 0x12,
	0x12, 0x87, 0xc7, 0x87, 0x87, 0x87, 0x0e, 0x8f, 0x7d, 0xfb, 0x04, 0xf6, 0xaf, 0x90, 0x0f, 0x43,
	0x46, 0x07, 0x3d, 0x49, 0x25, 0x7a, 0xf8, 0x35, 0x41, 0x21, 0xc9, 0x01, 0x40, 0x8e, 0x77, 0x5d,
	0x53, 0x6b, 0x6a, 0xad, 0x4d, 0xaf, 0x84, 0xd8, 0xbf, 0xeb, 0xf0, 0x64, 0xa6, 0x50, 0xc4, 0x11,
	0x13, 0x48, 0x08, 0xd4, 0xaf, 0xaf, 0x8b, 0x1a, 0xf5, 0x9b, 0x7c, 0x86, 0x46, 0xdb, 0xf7, 0xa3,
	0x84, 0x49, 0x61, 0xd6, 0x9a, 0x7a, 0x6b, 0xeb, 0xe8, 0xcc, 0xa9, 0x62, 0xcf, 0x99, 0x2b, 0xe1,
	0x64, 0x5c, 0x5e, 0x41, 0x4a, 0xfa, 0xb0, 0x73, 0x89, 0x2c, 0x08, 0x59, 0xff, 0x23, 0x0f, 0x90,
	0x0b, 0x53, 0x57, 0x2a, 0xed, 0x75, 0x54, 0x14, 0x93, 0x37, 0xcd, 0x4b, 0x1c, 0x20, 0x53, 0xc0,
	0x55, 0x24, 0xe9, 0xc0, 0xac, 0x37, 0xb5, 0xd6, 0x9e, 0x37, 0x67, 0x67, 0x7c, 0xfe, 0x8c, 0x8a,
	0xdb, 0x2e, 0xeb, 0xf9, 0x94, 0x79, 0xe8, 0x63, 0x78, 0x8f, 0x81, 0x69, 0x34, 0xb5, 0x56, 0xc3,
	0x9b, 0xb3, 0x63, 0x45, 0xb0, 0x91, 0x5d, 0x8a, 0x3c, 0x82, 0x5a, 0xd1, 0xc6, 0x5a, 0xd7, 0x25,
	0x4d, 0xd8, 0x72, 0x43, 0x11, 0x0f, 0xe8, 0xe8, 0x82, 0x0e, 0xd1, 0xac, 0xa9, 0x8d, 0x32, 0x44,
	0x4c, 0xd8, 0xe8, 0xd0, 0x01, 0x65, 0x3e, 0x9a, 0xba, 0x72, 0x94, 0x2f, 0xc7, 0x3b, 0xbd, 0x88,
	0xcb, 0x0f, 0x38, 0x52, 0x5e, 0x37, 0xbd, 0x7c, 0x69, 0x51, 0x30, 0x94, 0xdf, 0x59, 0x7a, 0xed,
	0x5f, 0xfa, 0x7d, 0x30, 0x2e, 0x79, 0xe8, 0xa7, 0xd2, 0x7b, 0x5e, 0xba, 0x18, 0xd7, 0x5d, 0x20,
	0x06, 0xc2, 0xc3, 0xfb, 0x10, 0xbf, 0x29, 0xe1, 0x86, 0x57, 0x86, 0xec, 0x2f, 0x40, 0xf2, 0x0e,
	0x77, 0x92, 0x51, 0xc5, 0x84, 0x91, 0xa7, 0xb0, 0x99, 0x75, 0xa2, 0xeb, 0x66, 0x97, 0x9d, 0x00,
	0x45, 0xca, 0xf4, 0x49, 0xca, 0xec, 0x97, 0xf0, 0x78, 0x4a, 0x27, 0x0b, 0xe4, 0x3e, 0x18, 0xe7,
	0x9c, 0x47, 0x3c, 0xd3, 0x48, 0x17, 0x76, 0x00, 0x07, 0xf9, 0xe1, 0x76, 0x10, 0xb8, 0x18, 0x47,
	0x22, 0x94, 0xe9, 0x93, 0x57, 0x34, 0x68, 0xc3, 0x76, 0xfa, 0x80, 0xed, 0xe1, 0xd8, 0x54, 0xd6,
	0x95, 0x29, 0xcc, 0x7e, 0x0d, 0xcf, 0xfe, 0xab, 0xb2, 0xd0, 0x5e, 0x6f, 0x72, 0x97, 0x34, 0x1f,
	0x95, 0x9b, 0x76, 0xc9, 0xa3, 0x20, 0xf1, 0x4b, 0x4d, 0x2b, 0x00, 0xfb, 0x55, 0x69, 0xd8, 0x15,
	0xe9, 0x42, 0x0b, 0x0e, 0x6c, 0xb7, 0x6f, 0x22, 0x2e, 0xab, 0xfe, 0x25, 0xbc, 0x80, 0x9d, 0xec,
	0xfc, 0x22, 0xda, 0xa3, 0x3f, 0x06, 0xec, 0x16, 0xcf, 0x44, 0xfd, 0x3b, 0x64, 0x01, 0xf9, 0xa9,
	0x41, 0xe3, 0x3d, 0x4a, 0x35, 0x7f, 0xe4, 0x74, 0xa5, 0xa1, 0x55, 0x1e, 0xad, 0x77, 0x6b, 0x0c,
	0xbc, 0xfd, 0x80, 0x7c, 0x07, 0xbd, 0x93, 0x8c, 0xc8, 0x9b, 0xe5, 0x58, 0x26, 0xa1, 0xb6, 0xde,
	0xae, 0x50, 0x59, 0xa8, 0xff, 0xd2, 0x60, 0x77, 0x26, 0x25, 0xc4, 0x5d, 0x8e, 0x70, 0x7e, 0x94,
	0xad, 0xf3, 0x35, 0x59, 0x0a, 0x8b, 0x3f, 0xa0, 0x3e, 0x4e, 0x0e, 0x59, 0xf2, 0x9e, 0xa5, 0x08,
	0x5b, 0xa7, 0xab, 0x94, 0x16, 0x06, 0x38, 0x18, 0x2a, 0x64, 0xe4, 0xa8, 0x1a, 0x4d, 0x39, 0xc1,
	0xd6, 0xf1, 0x52, 0x35, 0xb9, 0x66, 0xc7, 0xf8, 0xa4, 0xf3, 0xd8, 0xbf, 0x79, 0xa8, 0xbe, 0xab,
	0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x90, 0x3b, 0x1f, 0x87, 0x65, 0x07, 0x00, 0x00,
}
